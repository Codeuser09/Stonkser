# -*- coding: utf-8 -*-
"""
Created on Wed Jul 26 11:55:27 2023

@author: Simon
"""

# -*- coding: utf-8 -*-
"""
Created on Tue Jul 25 16:05:02 2023

@author: Simon
"""

# -*- coding: utf-8 -*-
"""StonksingBot-2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iw2LLLonWEFtFGlKIEdhI92bnctJAi_w

#Data prep
"""

import yfinance
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
import copy
import numpy as np

#Changed the period from 1 month to 3 months

def LoadData(GetFromSave, DebugTest=False, DebugAmount=20):
    MinDays = 200 #200 worked
    
    if GetFromSave == False:
        Symbols = pd.read_csv('GermanTradedCompanies.csv')
        
        #Setting up our data(First half)
        HistoryList = []
        NameList = []
        
        if DebugTest == False:
            IterationNumber=len(Symbols['Ticker'])
        else:
            IterationNumber=DebugAmount
        
        for i in range(IterationNumber):
          symbol = Symbols['Ticker'][i]
          Ticker = yfinance.Ticker(symbol)
          history = Ticker.history(period='1y', interval='1d')
          if history.empty == False:
            HistoryList.append(history)
            NameList.append(Symbols['Ticker'][i])
          print('Iteration', i, 'Of', len(Symbols['Ticker']))
        
        X_List = []
        y_List = []
        X_List_p = []
        Example = []
        OtherNameList = []
        PoppedNames = 0
        
        for r in range(len(HistoryList)):
          Frame = pd.DataFrame(HistoryList[r])
          for i in range(len(Frame['Close'])):
            Example.append(Frame['Close'][i])
          if len(Example) >= MinDays:
            NumbersToDel = len(Example) - MinDays
            if Example[:-NumbersToDel] != []:
              X_List.append(copy.deepcopy(Example[:-NumbersToDel]))
              X_List_p.append(copy.deepcopy(Example[-MinDays:]))
              y_List.append(copy.deepcopy(Example[-1]))
            else:
              NameList.pop(r-PoppedNames)
              PoppedNames += 1
          else:
            try:
              NameList.pop(r - PoppedNames)
              PoppedNames += 1
            except:
              print(i)
          Example = []
    
        np.save('X.npy', X_List)
        np.save('y.npy', y_List)
        np.save('X_P.npy', X_List_p)
        np.save('NameList', NameList)
        
        X = tf.constant(X_List)
        y = tf.constant(y_List)
        X_p = tf.constant(X_List_p)

    else:
        X = tf.constant(np.load('X.npy'))
        y = tf.constant(np.load('y.npy'))
        X_p = tf.constant(np.load('X_p.npy'))
        NameList = np.load('NameList.npy')
        
    return X, y, X_p, NameList

def PredictData(X_In, y_In, X_p_In):
    Predictions = []
    callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=20)
    print(len(X_p_In))
    for i in range(len(X_p_In)):
        print('Training Iteration', i, 'Of', len(X_In))
          
        tf.random.set_seed(42)
          
        Model = tf.keras.models.Sequential([
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(100),
          tf.keras.layers.Dense(10),
          tf.keras.layers.Dense(1)
        ])
          
        Model.compile(loss=tf.keras.losses.mae,
                    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0000001),
                    metrics=["mae"])
          
        Model.fit(X_In[i:i+1], y_In[i:i+1], epochs=9223372036854775807, callbacks=[callback]) 
        print(Model.predict(X_p_In[i:i+1]))
        Predictions.append(Model.predict(X_p_In[i:i+1]))
      
    return Predictions

def SaveDataToCSV(y_In, Predictions_In, NameList_In):
    PriceDifference = 0

    PriceDifferenceList = []

    for i in range(len(Predictions_In)):
      PriceDifference = Predictions_In[i] - y_In[i]
      PriceDifferenceList.append(PriceDifference.numpy())

    PVPScore = []
    for i in range(len(y_In)):
      PVPScore.append((PriceDifferenceList[i]/(y_In[i]+1))*100)

    Data = pd.DataFrame(columns=["Names"], data=NameList_In)
    Data.insert(loc=1, column='Price Difference', value=PriceDifferenceList)
    Data.insert(loc=2, column='Price', value=y_In)
    Data.insert(loc=3, column='New Price', value=Predictions_In)
    Data.insert(loc=4, column='PVP-Score', value=PVPScore)
    Sorted_Data = Data.sort_values('PVP-Score', ascending=False)
    Sorted_Data.to_csv('PredictionData.csv', sep=';')

X, y, X_p, NameList = LoadData(GetFromSave=True)

Predictions = PredictData(X, y, X_p)

SaveDataToCSV(Predictions, y, NameList)
